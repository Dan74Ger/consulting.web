// <auto-generated />
using System;
using ConsultingGroup.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsultingGroup.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250813133421_CreateAttivita750Table")]
    partial class CreateAttivita750Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsultingGroup.Models.AltriDati", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SitoWeb")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Utente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AltriDati");
                });

            modelBuilder.Entity("ConsultingGroup.Models.AnnoFiscale", b =>
                {
                    b.Property<int>("IdAnno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_anno");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnno"));

                    b.Property<int>("Anno")
                        .HasColumnType("int")
                        .HasColumnName("anno");

                    b.Property<bool>("AnnoCorrente")
                        .HasColumnType("bit")
                        .HasColumnName("anno_corrente");

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit")
                        .HasColumnName("attivo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("descrizione");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<DateTime?>("Scadenza730")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_730");

                    b.Property<DateTime?>("Scadenza740")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_740");

                    b.Property<DateTime?>("Scadenza750")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_750");

                    b.Property<DateTime?>("Scadenza760")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_760");

                    b.Property<DateTime?>("Scadenza770")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_770");

                    b.Property<DateTime?>("ScadenzaCU")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_CU");

                    b.Property<DateTime?>("ScadenzaDIVA")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_DIVA");

                    b.Property<DateTime?>("ScadenzaENC")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_ENC");

                    b.Property<DateTime?>("ScadenzaIRAP")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_IRAP");

                    b.Property<DateTime?>("ScadenzaLipe1t")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_Lipe_1t");

                    b.Property<DateTime?>("ScadenzaLipe2t")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_Lipe_2t");

                    b.Property<DateTime?>("ScadenzaLipe3t")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_Lipe_3t");

                    b.Property<DateTime?>("ScadenzaLipe4t")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_Lipe_4t");

                    b.Property<DateTime?>("ScadenzaModTRIva1t")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_Mod_TR_Iva_1t");

                    b.Property<DateTime?>("ScadenzaModTRIva2t")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_Mod_TR_Iva_2t");

                    b.Property<DateTime?>("ScadenzaModTRIva3t")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_Mod_TR_Iva_3t");

                    b.Property<DateTime?>("ScadenzaModTRIva4t")
                        .HasColumnType("datetime2")
                        .HasColumnName("scadenza_Mod_TR_Iva_4t");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdAnno");

                    b.HasIndex("Anno")
                        .IsUnique();

                    b.HasIndex("AnnoCorrente")
                        .IsUnique()
                        .HasFilter("[anno_corrente] = 1");

                    b.ToTable("anni_fiscali");
                });

            modelBuilder.Entity("ConsultingGroup.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ConsultingGroup.Models.Attivita730", b =>
                {
                    b.Property<int>("IdAttivita730")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_attivita_730");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAttivita730"));

                    b.Property<string>("CodiceDr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("codice_dr");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("DrControllata")
                        .HasColumnType("bit")
                        .HasColumnName("dr_controllata");

                    b.Property<DateTime?>("DrControllataData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_controllata_data");

                    b.Property<bool>("DrFirmata")
                        .HasColumnType("bit")
                        .HasColumnName("dr_firmata");

                    b.Property<bool>("DrInserita")
                        .HasColumnType("bit")
                        .HasColumnName("dr_inserita");

                    b.Property<DateTime?>("DrInseritaData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_inserita_data");

                    b.Property<bool>("DrSpedita")
                        .HasColumnType("bit")
                        .HasColumnName("dr_spedita");

                    b.Property<DateTime?>("DrSpeditaData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_spedita_data");

                    b.Property<int>("IdAnno")
                        .HasColumnType("int")
                        .HasColumnName("id_anno");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<int?>("IdProfessionista")
                        .HasColumnType("int")
                        .HasColumnName("id_professionista");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<bool>("PecInvioDr")
                        .HasColumnType("bit")
                        .HasColumnName("pec_invio_dr");

                    b.Property<string>("RaccoltaDocumenti")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("raccolta_documenti");

                    b.Property<bool>("RicevutaDr730")
                        .HasColumnType("bit")
                        .HasColumnName("ricevuta_dr_730");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdAttivita730");

                    b.HasIndex("IdAnno");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdProfessionista");

                    b.ToTable("attivita_730");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Attivita740", b =>
                {
                    b.Property<int>("IdAttivita740")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_attivita_740");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAttivita740"));

                    b.Property<string>("Bilancio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("bilancio");

                    b.Property<bool>("Cciaa")
                        .HasColumnType("bit")
                        .HasColumnName("cciaa");

                    b.Property<string>("CodiceDr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("codice_dr");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("DrControllata")
                        .HasColumnType("bit")
                        .HasColumnName("dr_controllata");

                    b.Property<DateTime?>("DrControllataData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_controllata_data");

                    b.Property<bool>("DrFirmata")
                        .HasColumnType("bit")
                        .HasColumnName("dr_firmata");

                    b.Property<bool>("DrInserita")
                        .HasColumnType("bit")
                        .HasColumnName("dr_inserita");

                    b.Property<DateTime?>("DrInseritaData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_inserita_data");

                    b.Property<bool>("DrSpedita")
                        .HasColumnType("bit")
                        .HasColumnName("dr_spedita");

                    b.Property<DateTime?>("DrSpeditaData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_spedita_data");

                    b.Property<bool>("F24PrimoAccontoSaldoConsegnato")
                        .HasColumnType("bit")
                        .HasColumnName("f24_primo_acconto_saldo_consegnato");

                    b.Property<int>("F24SecondoAcconto")
                        .HasColumnType("int")
                        .HasColumnName("f24_secondo_acconto");

                    b.Property<bool>("F24SecondoAccontoConsegnato")
                        .HasColumnType("bit")
                        .HasColumnName("f24_secondo_acconto_consegnato");

                    b.Property<bool>("FileIsaDisponibile")
                        .HasColumnType("bit")
                        .HasColumnName("file_isa_disponibile");

                    b.Property<int>("IdAnno")
                        .HasColumnType("int")
                        .HasColumnName("id_anno");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<int?>("IdProfessionista")
                        .HasColumnType("int")
                        .HasColumnName("id_professionista");

                    b.Property<bool>("IsaDrInseriti")
                        .HasColumnType("bit")
                        .HasColumnName("isa_dr_inseriti");

                    b.Property<DateTime?>("IsaDrInseritiData")
                        .HasColumnType("datetime2")
                        .HasColumnName("isa_dr_inseriti_data");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<int>("NumeroRateF24PrimoAccontoSaldo")
                        .HasColumnType("int")
                        .HasColumnName("numero_rate_f24_primo_acconto_saldo");

                    b.Property<bool>("PecInvioDr")
                        .HasColumnType("bit")
                        .HasColumnName("pec_invio_dr");

                    b.Property<string>("RaccoltaDocumenti")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("raccolta_documenti");

                    b.Property<bool>("RicevutaDr")
                        .HasColumnType("bit")
                        .HasColumnName("ricevuta_dr");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdAttivita740");

                    b.HasIndex("IdAnno");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdProfessionista");

                    b.ToTable("attivita_740");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Attivita750", b =>
                {
                    b.Property<int>("IdAttivita750")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_attivita_750");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAttivita750"));

                    b.Property<DateTime?>("AppuntamentoDataOra")
                        .HasColumnType("datetime2")
                        .HasColumnName("appuntamento_data_ora");

                    b.Property<string>("Bilancio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("bilancio");

                    b.Property<bool>("Cciaa")
                        .HasColumnType("bit")
                        .HasColumnName("cciaa");

                    b.Property<string>("CodiceDr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("codice_dr");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("DrControllata")
                        .HasColumnType("bit")
                        .HasColumnName("dr_controllata");

                    b.Property<DateTime?>("DrControllataData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_controllata_data");

                    b.Property<bool>("DrFirmata")
                        .HasColumnType("bit")
                        .HasColumnName("dr_firmata");

                    b.Property<bool>("DrInserita")
                        .HasColumnType("bit")
                        .HasColumnName("dr_inserita");

                    b.Property<DateTime?>("DrInseritaData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_inserita_data");

                    b.Property<bool>("DrSpedita")
                        .HasColumnType("bit")
                        .HasColumnName("dr_spedita");

                    b.Property<DateTime?>("DrSpeditaData")
                        .HasColumnType("datetime2")
                        .HasColumnName("dr_spedita_data");

                    b.Property<bool>("F24PrimoAccontoSaldoConsegnato")
                        .HasColumnType("bit")
                        .HasColumnName("f24_primo_acconto_saldo_consegnato");

                    b.Property<int>("F24SecondoAcconto")
                        .HasColumnType("int")
                        .HasColumnName("f24_secondo_acconto");

                    b.Property<bool>("F24SecondoAccontoConsegnato")
                        .HasColumnType("bit")
                        .HasColumnName("f24_secondo_acconto_consegnato");

                    b.Property<bool>("FileIsaDisponibile")
                        .HasColumnType("bit")
                        .HasColumnName("file_isa_disponibile");

                    b.Property<int>("IdAnno")
                        .HasColumnType("int")
                        .HasColumnName("id_anno");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<int?>("IdProfessionista")
                        .HasColumnType("int")
                        .HasColumnName("id_professionista");

                    b.Property<bool>("IsaDrInseriti")
                        .HasColumnType("bit")
                        .HasColumnName("isa_dr_inseriti");

                    b.Property<DateTime?>("IsaDrInseritiData")
                        .HasColumnType("datetime2")
                        .HasColumnName("isa_dr_inseriti_data");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<int>("NumeroRateF24PrimoAccontoSaldo")
                        .HasColumnType("int")
                        .HasColumnName("numero_rate_f24_primo_acconto_saldo");

                    b.Property<bool>("PecInvioDr")
                        .HasColumnType("bit")
                        .HasColumnName("pec_invio_dr");

                    b.Property<string>("RaccoltaDocumenti")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("raccolta_documenti");

                    b.Property<bool>("RicevutaDr")
                        .HasColumnType("bit")
                        .HasColumnName("ricevuta_dr");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdAttivita750");

                    b.HasIndex("IdAnno");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdProfessionista");

                    b.ToTable("attivita_750");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Banche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodiceUtente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Indirizzo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NomeBanca")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Banche");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Cancelleria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DenominazioneFornitore")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeUtente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SitoWeb")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cancelleria");
                });

            modelBuilder.Entity("ConsultingGroup.Models.CarteCredito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnoScadenza")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Intestazione")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MeseScadenza")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NumeroCarta")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CarteCredito");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit")
                        .HasColumnName("attivo");

                    b.Property<bool>("CassettoFiscale")
                        .HasColumnType("bit")
                        .HasColumnName("cassetto_fiscale");

                    b.Property<string>("CodiceAteco")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("codice_ateco");

                    b.Property<bool>("Conservazione")
                        .HasColumnType("bit")
                        .HasColumnName("conservazione");

                    b.Property<bool>("Contabilita")
                        .HasColumnType("bit")
                        .HasColumnName("contabilita");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DataAttivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_attivazione");

                    b.Property<DateTime?>("DataCessazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_cessazione");

                    b.Property<DateTime>("DataModifica")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_modifica");

                    b.Property<DateTime?>("DataRiattivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_riattivazione");

                    b.Property<bool>("Driva")
                        .HasColumnType("bit")
                        .HasColumnName("driva");

                    b.Property<bool>("FatturazioneElettronicaTs")
                        .HasColumnType("bit")
                        .HasColumnName("fatturazione_elettronica_ts");

                    b.Property<bool>("FirmaDigitale")
                        .HasColumnType("bit")
                        .HasColumnName("firma_digitale");

                    b.Property<int?>("IdProfessionista")
                        .HasColumnType("int")
                        .HasColumnName("id_professionista");

                    b.Property<int?>("IdProgramma")
                        .HasColumnType("int")
                        .HasColumnName("id_programma");

                    b.Property<int?>("IdRegimeContabile")
                        .HasColumnType("int")
                        .HasColumnName("id_regime_contabile");

                    b.Property<int?>("IdTipologiaInps")
                        .HasColumnType("int")
                        .HasColumnName("id_tipologia_inps");

                    b.Property<bool>("Imu")
                        .HasColumnType("bit")
                        .HasColumnName("imu");

                    b.Property<bool>("Inail")
                        .HasColumnType("bit")
                        .HasColumnName("inail");

                    b.Property<bool>("Inventari")
                        .HasColumnType("bit")
                        .HasColumnName("inventari");

                    b.Property<bool>("LettereIntento")
                        .HasColumnType("bit")
                        .HasColumnName("lettere_intento");

                    b.Property<bool>("LibroGiornale")
                        .HasColumnType("bit")
                        .HasColumnName("libro_giornale");

                    b.Property<bool>("Lipe")
                        .HasColumnType("bit")
                        .HasColumnName("lipe");

                    b.Property<string>("MailCliente")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mail_cliente");

                    b.Property<bool>("Mod730")
                        .HasColumnType("bit")
                        .HasColumnName("mod_730");

                    b.Property<bool>("Mod740")
                        .HasColumnType("bit")
                        .HasColumnName("mod_740");

                    b.Property<bool>("Mod750")
                        .HasColumnType("bit")
                        .HasColumnName("mod_750");

                    b.Property<bool>("Mod760")
                        .HasColumnType("bit")
                        .HasColumnName("mod_760");

                    b.Property<bool>("Mod770")
                        .HasColumnType("bit")
                        .HasColumnName("mod_770");

                    b.Property<bool>("ModCu")
                        .HasColumnType("bit")
                        .HasColumnName("mod_cu");

                    b.Property<bool>("ModEnc")
                        .HasColumnType("bit")
                        .HasColumnName("mod_enc");

                    b.Property<bool>("ModIntrastat")
                        .HasColumnType("bit")
                        .HasColumnName("mod_intrastat");

                    b.Property<bool>("ModIrap")
                        .HasColumnType("bit")
                        .HasColumnName("mod_irap");

                    b.Property<bool>("ModTrIva")
                        .HasColumnType("bit")
                        .HasColumnName("mod_tr_iva");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome_cliente");

                    b.Property<bool>("PeriodoContabilita")
                        .HasColumnType("bit")
                        .HasColumnName("periodo_contabilita");

                    b.Property<bool>("RegCespiti")
                        .HasColumnType("bit")
                        .HasColumnName("reg_cespiti");

                    b.Property<bool>("RegIva")
                        .HasColumnType("bit")
                        .HasColumnName("reg_iva");

                    b.Property<int?>("RiattivatoPerAnno")
                        .HasColumnType("int")
                        .HasColumnName("riattivato_per_anno");

                    b.Property<bool>("TitolareEffettivo")
                        .HasColumnType("bit")
                        .HasColumnName("titolare_effettivo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdProfessionista");

                    b.HasIndex("IdProgramma");

                    b.HasIndex("IdRegimeContabile");

                    b.HasIndex("IdTipologiaInps");

                    b.HasIndex("RiattivatoPerAnno");

                    b.ToTable("clienti");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Entratel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesktopTelematicoPassword")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DesktopTelematicoUtente")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PinCompleto")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PinDatiCatastali")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PinDelegheCassettoFiscale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sito")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Utente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Entratel");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Mail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndirizzoMail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeUtente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Professionista", b =>
                {
                    b.Property<int>("IdProfessionista")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_professionista");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessionista"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit")
                        .HasColumnName("attivo");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cognome");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DataAttivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_attivazione");

                    b.Property<DateTime?>("DataCessazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_cessazione");

                    b.Property<DateTime>("DataModifica")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_modifica");

                    b.Property<DateTime?>("DataRiattivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_riattivazione");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nome");

                    b.Property<int?>("RiattivatoPerAnno")
                        .HasColumnType("int")
                        .HasColumnName("riattivato_per_anno");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdProfessionista");

                    b.HasIndex("RiattivatoPerAnno");

                    b.ToTable("professionisti");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Programma", b =>
                {
                    b.Property<int>("IdProgramma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_programma");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProgramma"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit")
                        .HasColumnName("attivo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DataAttivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_attivazione");

                    b.Property<DateTime?>("DataCessazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_cessazione");

                    b.Property<DateTime>("DataModifica")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_modifica");

                    b.Property<DateTime?>("DataRiattivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_riattivazione");

                    b.Property<string>("NomeProgramma")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome_programma");

                    b.Property<int?>("RiattivatoPerAnno")
                        .HasColumnType("int")
                        .HasColumnName("riattivato_per_anno");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdProgramma");

                    b.HasIndex("RiattivatoPerAnno");

                    b.ToTable("tipo_programmi", t =>
                        {
                            t.HasTrigger("tr_tipo_programmi_update_date");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("ConsultingGroup.Models.RegimeContabile", b =>
                {
                    b.Property<int>("IdRegimeContabile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_regime_contabile");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRegimeContabile"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit")
                        .HasColumnName("attivo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DataAttivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_attivazione");

                    b.Property<DateTime?>("DataCessazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_cessazione");

                    b.Property<DateTime>("DataModifica")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_modifica");

                    b.Property<DateTime?>("DataRiattivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_riattivazione");

                    b.Property<string>("NomeRegime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome_regime");

                    b.Property<int?>("RiattivatoPerAnno")
                        .HasColumnType("int")
                        .HasColumnName("riattivato_per_anno");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdRegimeContabile");

                    b.HasIndex("RiattivatoPerAnno");

                    b.ToTable("regimi_contabili");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Studio", b =>
                {
                    b.Property<int>("IdStudio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_studio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStudio"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit")
                        .HasColumnName("attivo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DataAttivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_attivazione");

                    b.Property<DateTime?>("DataCessazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_cessazione");

                    b.Property<DateTime>("DataModifica")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_modifica");

                    b.Property<DateTime?>("DataRiattivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_riattivazione");

                    b.Property<string>("NomeStudio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nome_studio");

                    b.Property<int?>("RiattivatoPerAnno")
                        .HasColumnType("int")
                        .HasColumnName("riattivato_per_anno");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdStudio");

                    b.HasIndex("RiattivatoPerAnno");

                    b.ToTable("studios", t =>
                        {
                            t.HasTrigger("tr_studios_update_date");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("ConsultingGroup.Models.TipologiaInps", b =>
                {
                    b.Property<int>("IdTipologiaInps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tipologia_inps");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipologiaInps"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit")
                        .HasColumnName("attivo");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DataAttivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_attivazione");

                    b.Property<DateTime?>("DataCessazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_cessazione");

                    b.Property<DateTime>("DataModifica")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_modifica");

                    b.Property<DateTime?>("DataRiattivazione")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_riattivazione");

                    b.Property<int?>("RiattivatoPerAnno")
                        .HasColumnType("int")
                        .HasColumnName("riattivato_per_anno");

                    b.Property<string>("Tipologia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("tipologia");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("IdTipologiaInps");

                    b.HasIndex("RiattivatoPerAnno");

                    b.ToTable("tipologie_inps");
                });

            modelBuilder.Entity("ConsultingGroup.Models.UserPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAccessAnagrafiche")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessAreaAmministrativa")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessDatiUtenzaGenerale")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessDatiUtenzaRiservata")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessGestioneClienti")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GestioneAttivita")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("ConsultingGroup.Models.UtentiPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndirizzoRete")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomePC")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Utente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UtentiPC");
                });

            modelBuilder.Entity("ConsultingGroup.Models.UtentiTS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Utente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UtentiTS");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Utenze", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DenominazioneUtenza")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeUtente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SitoWeb")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Utenze");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ConsultingGroup.Models.AltriDati", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Attivita730", b =>
                {
                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscale")
                        .WithMany()
                        .HasForeignKey("IdAnno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingGroup.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingGroup.Models.Professionista", "Professionista")
                        .WithMany()
                        .HasForeignKey("IdProfessionista");

                    b.Navigation("AnnoFiscale");

                    b.Navigation("Cliente");

                    b.Navigation("Professionista");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Attivita740", b =>
                {
                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscale")
                        .WithMany()
                        .HasForeignKey("IdAnno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingGroup.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingGroup.Models.Professionista", "Professionista")
                        .WithMany()
                        .HasForeignKey("IdProfessionista");

                    b.Navigation("AnnoFiscale");

                    b.Navigation("Cliente");

                    b.Navigation("Professionista");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Attivita750", b =>
                {
                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscale")
                        .WithMany()
                        .HasForeignKey("IdAnno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingGroup.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingGroup.Models.Professionista", "Professionista")
                        .WithMany()
                        .HasForeignKey("IdProfessionista");

                    b.Navigation("AnnoFiscale");

                    b.Navigation("Cliente");

                    b.Navigation("Professionista");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Banche", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Cancelleria", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.CarteCredito", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Cliente", b =>
                {
                    b.HasOne("ConsultingGroup.Models.Professionista", "Professionista")
                        .WithMany()
                        .HasForeignKey("IdProfessionista");

                    b.HasOne("ConsultingGroup.Models.Programma", "Programma")
                        .WithMany()
                        .HasForeignKey("IdProgramma");

                    b.HasOne("ConsultingGroup.Models.RegimeContabile", "RegimeContabile")
                        .WithMany()
                        .HasForeignKey("IdRegimeContabile");

                    b.HasOne("ConsultingGroup.Models.TipologiaInps", "TipologiaInps")
                        .WithMany()
                        .HasForeignKey("IdTipologiaInps");

                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscaleRiattivazione")
                        .WithMany()
                        .HasForeignKey("RiattivatoPerAnno");

                    b.Navigation("AnnoFiscaleRiattivazione");

                    b.Navigation("Professionista");

                    b.Navigation("Programma");

                    b.Navigation("RegimeContabile");

                    b.Navigation("TipologiaInps");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Entratel", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Mail", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Professionista", b =>
                {
                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscaleRiattivazione")
                        .WithMany()
                        .HasForeignKey("RiattivatoPerAnno");

                    b.Navigation("AnnoFiscaleRiattivazione");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Programma", b =>
                {
                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscaleRiattivazione")
                        .WithMany("ProgrammiRiattivati")
                        .HasForeignKey("RiattivatoPerAnno")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AnnoFiscaleRiattivazione");
                });

            modelBuilder.Entity("ConsultingGroup.Models.RegimeContabile", b =>
                {
                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscaleRiattivazione")
                        .WithMany()
                        .HasForeignKey("RiattivatoPerAnno");

                    b.Navigation("AnnoFiscaleRiattivazione");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Studio", b =>
                {
                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscaleRiattivazione")
                        .WithMany("StudiosRiattivati")
                        .HasForeignKey("RiattivatoPerAnno")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AnnoFiscaleRiattivazione");
                });

            modelBuilder.Entity("ConsultingGroup.Models.TipologiaInps", b =>
                {
                    b.HasOne("ConsultingGroup.Models.AnnoFiscale", "AnnoFiscaleRiattivazione")
                        .WithMany()
                        .HasForeignKey("RiattivatoPerAnno");

                    b.Navigation("AnnoFiscaleRiattivazione");
                });

            modelBuilder.Entity("ConsultingGroup.Models.UserPermissions", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.UtentiPC", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.UtentiTS", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingGroup.Models.Utenze", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingGroup.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConsultingGroup.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingGroup.Models.AnnoFiscale", b =>
                {
                    b.Navigation("ProgrammiRiattivati");

                    b.Navigation("StudiosRiattivati");
                });
#pragma warning restore 612, 618
        }
    }
}
