@model ConsultingGroup.ViewModels.ClientiViewModel

@{
    ViewData["Title"] = "Modifica Cliente";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2><i class="fas fa-user-edit me-2 text-primary"></i>Modifica Cliente</h2>
                    <p class="text-muted mb-0">Modifica i dati del cliente: <strong>@Model.NomeCliente</strong></p>
                </div>
                <div>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-1"></i>Torna all'Elenco
                    </a>
                </div>
            </div>
        </div>
    </div>

    <form asp-action="Edit" method="post">
        @Html.HiddenFor(model => model.IdCliente)
        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

        <!-- Messaggi proforma -->
        @if (TempData["ProformaMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-file-invoice-dollar me-2"></i>@TempData["ProformaMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        @if (TempData["ProformaError"] != null)
        {
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ProformaError"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }
        
        <!-- Avviso Cambiamenti Attività -->
        <div class="alert alert-warning" id="activityChangeWarning" style="display: none;">
            <h5><i class="fas fa-exclamation-triangle me-2"></i>Attenzione ai Cambiamenti delle Attività Redditi</h5>
            <p><strong>Modificando le checkbox delle attività redditi (Mod.730, 740, 750, etc.):</strong></p>
            <ul class="mb-0">
                <li>Il cliente verrà automaticamente spostato nella nuova sezione di "Gestione Attività"</li>
                <li>I dati esistenti verranno migrati automaticamente alla nuova attività</li>
                <li>La vecchia attività verrà rimossa per evitare duplicati</li>
                <li>Esempio: cambiando da Mod.730 a Mod.740, tutti i dati DR, date e note verranno trasferiti</li>
            </ul>
        </div>

        <!-- Conferma Rimozione da Liste Attività -->
        @if (TempData["RichiestaConfermaRimozione"] != null)
        {
            <div class="alert alert-danger">
                <h5><i class="fas fa-exclamation-triangle me-2"></i>CONFERMA RIMOZIONE</h5>
                <div style="white-space: pre-line;">@TempData["WarningMessage"]</div>
                <div class="mt-3">
                    <input type="hidden" name="ConfermaRimozione" value="true" />
                    <button type="submit" class="btn btn-danger me-2">
                        <i class="fas fa-trash me-1"></i>SÌ, RIMUOVI DALLE LISTE
                    </button>
                    <a asp-action="Edit" asp-route-id="@Model.IdCliente" class="btn btn-secondary">
                        <i class="fas fa-times me-1"></i>Annulla
                    </a>
                </div>
            </div>
        }

        <!-- Sezione Anagrafica -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-id-card me-2"></i>Informazioni Anagrafiche
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="NomeCliente" class="form-label fw-bold">
                                    <i class="fas fa-user me-1"></i>@Html.DisplayNameFor(model => model.NomeCliente)
                                    <span class="text-danger">*</span>
                                </label>
                                <input asp-for="NomeCliente" class="form-control" placeholder="Inserisci nome o ragione sociale">
                                <span asp-validation-for="NomeCliente" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="MailCliente" class="form-label">
                                    <i class="fas fa-envelope me-1"></i>@Html.DisplayNameFor(model => model.MailCliente)
                                </label>
                                <input asp-for="MailCliente" class="form-control" placeholder="cliente@email.com">
                                <span asp-validation-for="MailCliente" class="text-danger"></span>
                            </div>
                        </div>
                        <!-- Nuovi campi dati cliente -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="CfCliente" class="form-label">
                                    <i class="fas fa-id-card me-1"></i>@Html.DisplayNameFor(model => model.CfCliente)
                                </label>
                                <input asp-for="CfCliente" class="form-control" placeholder="Es: RSSMRA80A01H501U">
                                <span asp-validation-for="CfCliente" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="PivaCliente" class="form-label">
                                    <i class="fas fa-file-invoice me-1"></i>@Html.DisplayNameFor(model => model.PivaCliente)
                                </label>
                                <input asp-for="PivaCliente" class="form-control" placeholder="Es: 12345678901">
                                <span asp-validation-for="PivaCliente" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label asp-for="Indirizzo" class="form-label">
                                    <i class="fas fa-map-marker-alt me-1"></i>@Html.DisplayNameFor(model => model.Indirizzo)
                                </label>
                                <input asp-for="Indirizzo" class="form-control" placeholder="Es: Via Roma, 123">
                                <span asp-validation-for="Indirizzo" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label asp-for="Citta" class="form-label">
                                    <i class="fas fa-city me-1"></i>@Html.DisplayNameFor(model => model.Citta)
                                </label>
                                <input asp-for="Citta" class="form-control" placeholder="Es: Milano">
                                <span asp-validation-for="Citta" class="text-danger"></span>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label asp-for="Provincia" class="form-label">
                                    <i class="fas fa-map me-1"></i>@Html.DisplayNameFor(model => model.Provincia)
                                </label>
                                <input asp-for="Provincia" class="form-control" placeholder="Es: MI">
                                <span asp-validation-for="Provincia" class="text-danger"></span>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label asp-for="Cap" class="form-label">
                                    <i class="fas fa-mail-bulk me-1"></i>@Html.DisplayNameFor(model => model.Cap)
                                </label>
                                <input asp-for="Cap" class="form-control" placeholder="Es: 20100">
                                <span asp-validation-for="Cap" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="LegaleRappresentante" class="form-label">
                                    <i class="fas fa-user-tie me-1"></i>@Html.DisplayNameFor(model => model.LegaleRappresentante)
                                </label>
                                <input asp-for="LegaleRappresentante" class="form-control" placeholder="Es: Mario Rossi">
                                <span asp-validation-for="LegaleRappresentante" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="CfLegaleRappresentante" class="form-label">
                                    <i class="fas fa-id-card me-1"></i>@Html.DisplayNameFor(model => model.CfLegaleRappresentante)
                                </label>
                                <input asp-for="CfLegaleRappresentante" class="form-control" placeholder="Es: RSSMRA80A01H501U">
                                <span asp-validation-for="CfLegaleRappresentante" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="CodiceAteco" class="form-label fw-bold">
                                    <i class="fas fa-industry me-1"></i>@Html.DisplayNameFor(model => model.CodiceAteco)
                                    <span class="badge bg-primary ms-1">MASTER</span>
                                </label>
                                <input asp-for="CodiceAteco" class="form-control" placeholder="Es: 62.01.00">
                                <span asp-validation-for="CodiceAteco" class="text-danger"></span>
                                <div class="form-text">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Campo master per la classificazione dell'attività
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sezione Mandati -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-handshake me-2"></i>Mandati
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label asp-for="DataMandato" class="form-label">
                                    <i class="fas fa-calendar me-1"></i>@Html.DisplayNameFor(model => model.DataMandato)
                                </label>
                                <input asp-for="DataMandato" type="date" class="form-control">
                                <span asp-validation-for="DataMandato" class="text-danger"></span>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label asp-for="ImportoMandatoAnnuo" class="form-label">
                                    <i class="fas fa-euro-sign me-1"></i>@Html.DisplayNameFor(model => model.ImportoMandatoAnnuo)
                                </label>
                                <input asp-for="ImportoMandatoAnnuo" type="number" step="0.01" class="form-control" placeholder="0.00" id="importoMandatoAnnuo">
                                <span asp-validation-for="ImportoMandatoAnnuo" class="text-danger"></span>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label asp-for="ProformaTipo" class="form-label">
                                    <i class="fas fa-calendar-check me-1"></i>@Html.DisplayNameFor(model => model.ProformaTipo)
                                </label>
                                <select asp-for="ProformaTipo" asp-items="@Model.PeriodicittaDisponibili" class="form-select" id="proformaTipo">
                                </select>
                                <span asp-validation-for="ProformaTipo" class="text-danger"></span>
                            </div>
                        </div>
                        <!-- Riepilogo Proforma Dinamico -->
                        <div class="row" id="riepilogoProforma" style="display:none;">
                            <div class="col-12">
                                <div class="card border-warning">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0">
                                            <i class="fas fa-calculator me-2 text-warning"></i>
                                            <span id="titoloRiepilogo">Riepilogo Proforma</span>
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="alert alert-info mb-3" id="istruzioniProforma" style="display: none;">
                                            <i class="fas fa-info-circle me-2"></i>
                                            <strong>Come modificare:</strong> Cambia date e/o importi negli input, poi premi il pulsante <strong>"💾 Salva"</strong> per ogni rata che vuoi aggiornare nel database.
                                        </div>
                                        <div id="contenutoRiepilogo" class="row">
                                            <!-- Il contenuto verrà generato dinamicamente -->
                                        </div>
                                        <small class="text-muted mt-2 d-block">
                                            <i class="fas fa-exclamation-triangle me-1"></i>
                                            <strong>Attenzione:</strong> Modificando i dati mandato, le proforma esistenti verranno cancellate e rigenerate automaticamente al salvataggio.
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sezione Relazioni -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-link me-2"></i>Relazioni e Assegnazioni
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="IdProgramma" class="form-label">
                                    <i class="fas fa-cogs me-1"></i>@Html.DisplayNameFor(model => model.IdProgramma)
                                </label>
                                <select asp-for="IdProgramma" class="form-select" asp-items="@Model.ProgrammiDisponibili">
                                    <option value="">-- Seleziona Programma (opzionale) --</option>
                                </select>
                                <span asp-validation-for="IdProgramma" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="IdProfessionista" class="form-label">
                                    <i class="fas fa-user-tie me-1"></i>@Html.DisplayNameFor(model => model.IdProfessionista)
                                </label>
                                <select asp-for="IdProfessionista" class="form-select" asp-items="@Model.ProfessionistiDisponibili">
                                    <option value="">-- Seleziona Professionista (opzionale) --</option>
                                </select>
                                <span asp-validation-for="IdProfessionista" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="IdRegimeContabile" class="form-label">
                                    <i class="fas fa-balance-scale me-1"></i>@Html.DisplayNameFor(model => model.IdRegimeContabile)
                                </label>
                                <select asp-for="IdRegimeContabile" class="form-select" asp-items="@Model.RegimiContabiliDisponibili">
                                    <option value="">-- Seleziona Regime Contabile (opzionale) --</option>
                                </select>
                                <span asp-validation-for="IdRegimeContabile" class="text-danger"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="IdTipologiaInps" class="form-label">
                                    <i class="fas fa-id-card me-1"></i>@Html.DisplayNameFor(model => model.IdTipologiaInps)
                                </label>
                                <select asp-for="IdTipologiaInps" class="form-select" asp-items="@Model.TipologieInpsDisponibili">
                                    <option value="">-- Seleziona Tipologia INPS (opzionale) --</option>
                                </select>
                                <span asp-validation-for="IdTipologiaInps" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="RiattivatoPerAnno" class="form-label">
                                    <i class="fas fa-calendar-alt me-1"></i>@Html.DisplayNameFor(model => model.RiattivatoPerAnno)
                                </label>
                                <select asp-for="RiattivatoPerAnno" class="form-select" asp-items="@Model.AnniFiscaliDisponibili">
                                    <option value="">-- Seleziona Anno Fiscale (opzionale) --</option>
                                </select>
                                <span asp-validation-for="RiattivatoPerAnno" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sezione Configurazione -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-cog me-2"></i>Configurazione Operativa
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-calculator me-1"></i>Gestione Contabilità
                                </label>
                                <div class="form-check">
                                    <input asp-for="ContabilitaInternaTrimestrale" class="form-check-input" type="checkbox">
                                    <label asp-for="ContabilitaInternaTrimestrale" class="form-check-label">
                                        Contabilità Interna Trimestrale
                                    </label>
                                </div>
                                <div class="form-check mt-2">
                                    <input asp-for="ContabilitaInternaMensile" class="form-check-input" type="checkbox">
                                    <label asp-for="ContabilitaInternaMensile" class="form-check-label">
                                        Contabilità Interna Mensile
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="TassoIvaTrimestrale" class="form-label fw-bold">
                                    <i class="fas fa-percent me-1"></i>Tasso per IVA Trimestrale
                                </label>
                                <div class="input-group">
                                    <input asp-for="TassoIvaTrimestrale" class="form-control" type="number" step="0.0001" min="0" max="1" />
                                    <span class="input-group-text">%</span>
                                </div>
                                <div class="form-text">Default: 1% (0.01)</div>
                                <span asp-validation-for="TassoIvaTrimestrale" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- SEZIONI ATTIVITÀ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-tasks me-2"></i>Attività e Servizi
                            <small class="ms-2">
                                <i class="fas fa-info-circle"></i>
                                Modifica le attività per aggiornare le inclusioni nelle gestioni
                            </small>
                        </h5>
                    </div>
                    <div class="card-body">
                        
                        <!-- ATTIVITÀ REDDITI -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-danger fw-bold border-bottom border-danger pb-2 mb-3">
                                    <i class="fas fa-file-invoice-dollar me-2"></i>ATTIVITÀ REDDITI
                                </h6>
                                <div class="row">
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Mod730" class="form-check-input" type="checkbox">
                                            <label asp-for="Mod730" class="form-check-label">@Html.DisplayNameFor(model => model.Mod730)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Mod740" class="form-check-input" type="checkbox">
                                            <label asp-for="Mod740" class="form-check-label">@Html.DisplayNameFor(model => model.Mod740)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Mod750" class="form-check-input" type="checkbox">
                                            <label asp-for="Mod750" class="form-check-label">@Html.DisplayNameFor(model => model.Mod750)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Mod760" class="form-check-input" type="checkbox">
                                            <label asp-for="Mod760" class="form-check-label">@Html.DisplayNameFor(model => model.Mod760)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Mod770" class="form-check-input" type="checkbox">
                                            <label asp-for="Mod770" class="form-check-label">@Html.DisplayNameFor(model => model.Mod770)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="ModCu" class="form-check-input" type="checkbox">
                                            <label asp-for="ModCu" class="form-check-label">@Html.DisplayNameFor(model => model.ModCu)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="ModEnc" class="form-check-input" type="checkbox">
                                            <label asp-for="ModEnc" class="form-check-label">@Html.DisplayNameFor(model => model.ModEnc)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="ModIrap" class="form-check-input" type="checkbox">
                                            <label asp-for="ModIrap" class="form-check-label">@Html.DisplayNameFor(model => model.ModIrap)</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ATTIVITÀ IVA -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-warning fw-bold border-bottom border-warning pb-2 mb-3">
                                    <i class="fas fa-percent me-2"></i>ATTIVITÀ IVA
                                </h6>
                                <div class="row">
                                    <div class="col-md-4 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Driva" class="form-check-input" type="checkbox">
                                            <label asp-for="Driva" class="form-check-label">@Html.DisplayNameFor(model => model.Driva)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Lipe" class="form-check-input" type="checkbox">
                                            <label asp-for="Lipe" class="form-check-label">@Html.DisplayNameFor(model => model.Lipe)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <div class="form-check">
                                            <input asp-for="ModTrIva" class="form-check-input" type="checkbox">
                                            <label asp-for="ModTrIva" class="form-check-label">@Html.DisplayNameFor(model => model.ModTrIva)</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ATTIVITÀ CONTABILE -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <h6 class="text-success fw-bold border-bottom border-success pb-2 mb-3">
                                    <i class="fas fa-book me-2"></i>ATTIVITÀ CONTABILE
                                </h6>
                                <div class="row">
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Inail" class="form-check-input" type="checkbox">
                                            <label asp-for="Inail" class="form-check-label">@Html.DisplayNameFor(model => model.Inail)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="CassettoFiscale" class="form-check-input" type="checkbox">
                                            <label asp-for="CassettoFiscale" class="form-check-label">@Html.DisplayNameFor(model => model.CassettoFiscale)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="FatturazioneElettronicaTs" class="form-check-input" type="checkbox">
                                            <label asp-for="FatturazioneElettronicaTs" class="form-check-label">@Html.DisplayNameFor(model => model.FatturazioneElettronicaTs)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Conservazione" class="form-check-input" type="checkbox">
                                            <label asp-for="Conservazione" class="form-check-label">@Html.DisplayNameFor(model => model.Conservazione)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Imu" class="form-check-input" type="checkbox">
                                            <label asp-for="Imu" class="form-check-label">@Html.DisplayNameFor(model => model.Imu)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="RegIva" class="form-check-input" type="checkbox">
                                            <label asp-for="RegIva" class="form-check-label">@Html.DisplayNameFor(model => model.RegIva)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="RegCespiti" class="form-check-input" type="checkbox">
                                            <label asp-for="RegCespiti" class="form-check-label">@Html.DisplayNameFor(model => model.RegCespiti)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="Inventari" class="form-check-input" type="checkbox">
                                            <label asp-for="Inventari" class="form-check-label">@Html.DisplayNameFor(model => model.Inventari)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="LibroGiornale" class="form-check-input" type="checkbox">
                                            <label asp-for="LibroGiornale" class="form-check-label">@Html.DisplayNameFor(model => model.LibroGiornale)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="LettereIntento" class="form-check-input" type="checkbox">
                                            <label asp-for="LettereIntento" class="form-check-label">@Html.DisplayNameFor(model => model.LettereIntento)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="ModIntrastat" class="form-check-input" type="checkbox">
                                            <label asp-for="ModIntrastat" class="form-check-label">@Html.DisplayNameFor(model => model.ModIntrastat)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="FirmaDigitale" class="form-check-input" type="checkbox">
                                            <label asp-for="FirmaDigitale" class="form-check-label">@Html.DisplayNameFor(model => model.FirmaDigitale)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="form-check">
                                            <input asp-for="TitolareEffettivo" class="form-check-input" type="checkbox">
                                            <label asp-for="TitolareEffettivo" class="form-check-label">@Html.DisplayNameFor(model => model.TitolareEffettivo)</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sezione Stato (Solo visualizzazione) -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-info-circle me-2"></i>Informazioni di Stato
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label text-muted">
                                    <i class="fas fa-toggle-on me-1"></i>Stato Attuale
                                </label>
                                <div>
                                    @if (Model.Attivo)
                                    {
                                        <span class="badge bg-success fs-6">
                                            <i class="fas fa-check me-1"></i>Attivo
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark fs-6">
                                            <i class="fas fa-pause me-1"></i>Cessato
                                        </span>
                                    }
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label text-muted">
                                    <i class="fas fa-calendar me-1"></i>Data Attivazione
                                </label>
                                <div class="form-control-plaintext">
                                    @Model.DataAttivazione.ToString("dd/MM/yyyy HH:mm")
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottoni Azione -->
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-times me-1"></i>Annulla
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i>Salva Modifiche
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>

@section Styles {
    <style>
        /* Stili personalizzati per checkbox nere più visibili */
        .form-check-input {
            background-color: transparent !important;
            border: 2px solid #000 !important;
            border-radius: 4px !important;
            width: 18px !important;
            height: 18px !important;
        }
        
        .form-check-input:checked {
            background-color: #000 !important;
            border-color: #000 !important;
        }
        
        .form-check-input:focus {
            border-color: #333 !important;
            box-shadow: 0 0 0 0.2rem rgba(0, 0, 0, 0.25) !important;
        }
        
        .form-check-input:hover {
            border-color: #333 !important;
        }
        
        /* Stile per il checkmark */
        .form-check-input:checked::before {
            content: '✓';
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 12px;
            width: 100%;
            height: 100%;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Memorizza i valori iniziali di tutte le attività (redditi, IVA e contabili)
            var initialActivityValues = {
                // Attività Redditi
                Mod730: $('#Mod730').is(':checked'),
                Mod740: $('#Mod740').is(':checked'),
                Mod750: $('#Mod750').is(':checked'),
                Mod760: $('#Mod760').is(':checked'),
                Mod770: $('#Mod770').is(':checked'),
                ModCu: $('#ModCu').is(':checked'),
                ModEnc: $('#ModEnc').is(':checked'),
                ModIrap: $('#ModIrap').is(':checked'),
                // Attività IVA
                Driva: $('#Driva').is(':checked'),
                Lipe: $('#Lipe').is(':checked'),
                ModTrIva: $('#ModTrIva').is(':checked'),
                // Attività Contabili
                Inail: $('#Inail').is(':checked'),
                CassettoFiscale: $('#CassettoFiscale').is(':checked'),
                FatturazioneElettronicaTs: $('#FatturazioneElettronicaTs').is(':checked'),
                Conservazione: $('#Conservazione').is(':checked'),
                Imu: $('#Imu').is(':checked'),
                RegIva: $('#RegIva').is(':checked'),
                RegCespiti: $('#RegCespiti').is(':checked'),
                Inventari: $('#Inventari').is(':checked'),
                LibroGiornale: $('#LibroGiornale').is(':checked'),
                LettereIntento: $('#LettereIntento').is(':checked'),
                ModIntrastat: $('#ModIntrastat').is(':checked'),
                FirmaDigitale: $('#FirmaDigitale').is(':checked'),
                TitolareEffettivo: $('#TitolareEffettivo').is(':checked')
            };
            
            // Funzione per controllare se ci sono cambiamenti
            function checkActivityChanges() {
                var hasChanges = false;
                
                // Controlla ogni attività redditi
                $.each(initialActivityValues, function(key, initialValue) {
                    var currentValue = $('#' + key).is(':checked');
                    if (initialValue !== currentValue) {
                        hasChanges = true;
                        return false; // Break del loop
                    }
                });
                
                // Mostra/nasconde l'avviso
                if (hasChanges) {
                    $('#activityChangeWarning').slideDown();
                } else {
                    $('#activityChangeWarning').slideUp();
                }
            }
            
            // Event listener per tutte le checkbox delle attività (redditi, IVA e contabili)
            $('#Mod730, #Mod740, #Mod750, #Mod760, #Mod770, #ModCu, #ModEnc, #ModIrap, #Driva, #Lipe, #ModTrIva, #Inail, #CassettoFiscale, #FatturazioneElettronicaTs, #Conservazione, #Imu, #RegIva, #RegCespiti, #Inventari, #LibroGiornale, #LettereIntento, #ModIntrastat, #FirmaDigitale, #TitolareEffettivo').change(function() {
                var checkboxName = this.id;
                var isChecked = $(this).is(':checked');
                var wasInitiallyChecked = initialActivityValues[checkboxName];
                
                // Se la checkbox era inizialmente spuntata e ora viene disattivata
                if (wasInitiallyChecked && !isChecked) {
                    var serviceName = getServiceDisplayName(checkboxName);
                    
                    // Popup di avviso per disattivazione
                    if (!confirm(`⚠️ ATTENZIONE!\n\nStai per disattivare il servizio "${serviceName}".\n\nTogliendo il visto, il cliente cambierà di modello e TUTTI I DATI verranno RESETTATI ai valori di default.\n\nQuesta operazione è IRREVERSIBILE!\n\nSei sicuro di voler procedere?`)) {
                        // Se l'utente annulla, ripristina la checkbox
                        $(this).prop('checked', true);
                        return;
                    }
                }
                
                checkActivityChanges();
            });
            
            // Funzione per ottenere il nome visualizzato del servizio
            function getServiceDisplayName(checkboxId) {
                const serviceNames = {
                    // Attività Redditi
                    'Mod730': 'Mod. 730',
                    'Mod740': 'Mod. 740', 
                    'Mod750': 'Mod. 750',
                    'Mod760': 'Mod. 760',
                    'Mod770': 'Mod. 770',
                    'ModCu': 'Mod. CU',
                    'ModEnc': 'Mod. ENC',
                    'ModIrap': 'Mod. IRAP',
                    // Attività IVA
                    'Driva': 'DRIVA',
                    'Lipe': 'LIPE',
                    'ModTrIva': 'Mod. TR IVA',
                    // Attività Contabili
                    'Inail': 'INAIL',
                    'CassettoFiscale': 'Cassetto Fiscale',
                    'FatturazioneElettronicaTs': 'Fatturazione Elettronica TS',
                    'Conservazione': 'Conservazione',
                    'Imu': 'IMU',
                    'RegIva': 'Registro IVA',
                    'RegCespiti': 'Registro Cespiti',
                    'Inventari': 'Inventari',
                    'LibroGiornale': 'Libro Giornale',
                    'LettereIntento': 'Lettere d\'Intento',
                    'ModIntrastat': 'Mod. INTRASTAT',
                    'FirmaDigitale': 'Firma Digitale',
                    'TitolareEffettivo': 'Titolare Effettivo'
                };
                return serviceNames[checkboxId] || checkboxId;
            }
        });
        
        // Funzione globale per salvare una singola proforma modificata
        async function salvaProformaSingola(periodo, tipoProforma) {
            console.log('🔵 salvaProformaSingola chiamata:', periodo, tipoProforma);
            const clienteId = @Model.IdCliente;
            console.log('🔵 Cliente ID:', clienteId);
            
            // Trova gli input relativi a questo periodo
            const dateInput = document.querySelector(`.date-input[data-periodo="${periodo}"]`);
            const importoInput = document.querySelector(`.importo-input[data-periodo="${periodo}"]`);
            const saveBtn = document.querySelector(`.save-proforma-btn[data-periodo="${periodo}"]`);
            
            console.log('🔵 Elementi trovati:', {
                dateInput: dateInput,
                importoInput: importoInput,
                saveBtn: saveBtn
            });
            
            if (!dateInput || !importoInput) {
                alert('Errore: impossibile trovare i campi di input.');
                console.error('❌ Elementi mancanti:', { dateInput, importoInput, saveBtn });
                return;
            }
            
            const dataScadenza = dateInput.value;
            const importoRata = parseFloat(importoInput.value);
            
            console.log('🔵 Valori da salvare:', {
                dataScadenza: dataScadenza,
                importoRata: importoRata
            });
            
            // Validazioni client-side
            if (!dataScadenza) {
                alert('Inserire una data di scadenza valida.');
                dateInput.focus();
                return;
            }
            
            if (isNaN(importoRata) || importoRata <= 0) {
                alert('Inserire un importo valido maggiore di zero.');
                importoInput.focus();
                return;
            }
            
            // Validazione data: solo formato corretto, accettiamo anche date passate
            const dataInserita = new Date(dataScadenza);
            if (isNaN(dataInserita.getTime())) {
                alert('Inserire una data valida.');
                dateInput.focus();
                return;
            }
            
            // Disabilita il pulsante durante il salvataggio
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            
            try {
                // Prima carica le proforma esistenti per trovare l'ID
                const proformeResponse = await fetch(`/Clienti/GetProformeCliente?idCliente=${clienteId}`);
                const proformeData = await proformeResponse.json();
                
                if (!proformeData.success || !proformeData.proforma || proformeData.proforma.length === 0) {
                    alert('Errore: impossibile trovare le proforma esistenti. Assicurarsi di aver salvato il cliente prima.');
                    return;
                }
                
                // Trova la proforma corrispondente al periodo
                const proforma = proformeData.proforma.find(p => p.numeroRata === periodo && p.tipoProforma === tipoProforma);
                if (!proforma) {
                    alert(`Errore: impossibile trovare la proforma per il periodo ${periodo}.`);
                    return;
                }
                
                // Effettua l'aggiornamento
                console.log('Invio richiesta aggiornamento:', {
                    idProforma: proforma.idProforma,
                    dataScadenza: dataScadenza,
                    importoRata: importoRata
                });
                
                // Ottieni il token anti-forgery
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                
                const formData = new URLSearchParams({
                    idProforma: proforma.idProforma,
                    dataScadenza: dataScadenza,
                    importoRata: importoRata
                });
                
                if (token) {
                    formData.append('__RequestVerificationToken', token);
                }
                
                const response = await fetch('/Clienti/UpdateProformaCustom', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData
                });
                
                console.log('Response status:', response.status);
                console.log('Response headers:', [...response.headers.entries()]);
                
                const result = await response.json();
                
                if (result.success) {
                    // Feedback visivo di successo
                    saveBtn.className = 'btn btn-sm btn-success save-proforma-btn';
                    saveBtn.innerHTML = '<i class="fas fa-check"></i> Salvato!';
                    
                    // Mostra messaggio di conferma temporaneo
                    const row = saveBtn.closest('tr');
                    if (row) {
                        row.style.backgroundColor = '#d4edda';
                        setTimeout(() => {
                            row.style.backgroundColor = '';
                        }, 3000);
                    }
                    
                    // Ripristina il pulsante dopo 3 secondi
                    setTimeout(() => {
                        saveBtn.className = 'btn btn-sm btn-outline-primary save-proforma-btn';
                        saveBtn.innerHTML = '<i class="fas fa-save"></i> Salva';
                        saveBtn.disabled = false;
                    }, 3000);
                    
                    console.log('✅ Proforma aggiornata:', result);
                    
                    // Mostra toast di successo se disponibile
                    if (typeof window.showToast === 'function') {
                        window.showToast('Proforma salvata con successo!', 'success');
                    }
                } else {
                    alert('Errore: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Errore durante il salvataggio:', error);
                alert('Errore durante il salvataggio: ' + error.message);
            } finally {
                // Ripristina il pulsante in caso di errore
                if (saveBtn.disabled) {
                    saveBtn.disabled = false;
                    saveBtn.innerHTML = '<i class="fas fa-save"></i> Salva';
                }
            }
        }
        
        // Script per gestire il riepilogo dinamico delle proforma con rigenerazione
        const proformaTipoSelect = document.getElementById('proformaTipo');
        const importoMandatoInput = document.getElementById('importoMandatoAnnuo');
        const dataMandatoInput = document.querySelector('input[name="DataMandato"]');
        const riepilogoContainer = document.getElementById('riepilogoProforma');
        const titoloRiepilogo = document.getElementById('titoloRiepilogo');
        const contenutoRiepilogo = document.getElementById('contenutoRiepilogo');
        
        // Memorizza i valori iniziali (sarà popolato dopo il caricamento completo)
        let initialMandatoValues = {};
        
        // Ottiene l'anno fatturazione corrente
        let annoCorrente = 2025; // Default
        fetch('/Clienti/GetAnnoFatturazioneCorrente')
            .then(response => response.json())
            .then(data => {
                if (data.anno) annoCorrente = data.anno;
                updateRiepilogo(); // Aggiorna quando ottiene l'anno
            })
            .catch(() => console.log('Usando anno default 2025'));
        
        // Date per trimestri e mesi
        function getDateTrimestrali(anno) {
            return [
                { data: `31/03/${anno}`, mese: 'Q1' },
                { data: `30/06/${anno}`, mese: 'Q2' },
                { data: `30/09/${anno}`, mese: 'Q3' },
                { data: `31/12/${anno}`, mese: 'Q4' }
            ];
        }
        
        function getDateMensili(anno) {
            const isLeapYear = anno % 4 === 0 && (anno % 100 !== 0 || anno % 400 === 0);
            return [
                { data: `31/01/${anno}`, mese: 'Gen' },
                { data: `${isLeapYear ? '29' : '28'}/02/${anno}`, mese: 'Feb' },
                { data: `31/03/${anno}`, mese: 'Mar' },
                { data: `30/04/${anno}`, mese: 'Apr' },
                { data: `31/05/${anno}`, mese: 'Mag' },
                { data: `30/06/${anno}`, mese: 'Giu' },
                { data: `31/07/${anno}`, mese: 'Lug' },
                { data: `31/08/${anno}`, mese: 'Ago' },
                { data: `30/09/${anno}`, mese: 'Set' },
                { data: `31/10/${anno}`, mese: 'Ott' },
                { data: `30/11/${anno}`, mese: 'Nov' },
                { data: `31/12/${anno}`, mese: 'Dic' }
            ];
        }
        
        // Funzione per aggiornare il riepilogo
        function updateRiepilogo() {
            if (!importoMandatoInput || !proformaTipoSelect) return;
            
            const importoAnnuo = parseFloat(importoMandatoInput.value) || 0;
            const periodicita = proformaTipoSelect.value;
            
            if (importoAnnuo <= 0) {
                riepilogoContainer.style.display = 'none';
                return;
            }
            
            riepilogoContainer.style.display = 'block';
            
            // Se l'utente ha modificato valori manualmente, non sovrascriverli
            if (userHasModifiedValues) {
                console.log('🚫 Evito di sovrascrivere valori modificati manualmente');
                return;
            }
            
            if (periodicita === 'trimestrale') {
                const importoTrimestrale = (importoAnnuo / 4).toFixed(2);
                titoloRiepilogo.textContent = 'Riepilogo Proforma Trimestrali';
                
                const dateTrimestrali = getDateTrimestrali(annoCorrente);
                let html = '<div class="col-12"><div class="table-responsive"><table class="table table-sm table-striped">';
                html += '<thead class="table-warning"><tr><th>Trimestre</th><th>Data Scadenza</th><th>Importo</th><th>Azioni</th></tr></thead><tbody>';
                
                dateTrimestrali.forEach((item, index) => {
                    const dataInput = `<input type="date" class="form-control form-control-sm date-input" data-periodo="${index + 1}" value="${convertToInputDate(item.data)}" style="width: 140px;">`;
                    const importoInput = `<input type="number" class="form-control form-control-sm importo-input" data-periodo="${index + 1}" value="${importoTrimestrale}" step="0.01" min="0" style="width: 100px;">`;
                    const salvaBtn = `<button class="btn btn-sm btn-outline-primary save-proforma-btn" data-periodo="${index + 1}" onclick="salvaProformaSingola(${index + 1}, 'trimestrale')" title="Salva questa rata nel database"><i class="fas fa-save"></i> Salva</button>`;
                    
                    html += `<tr><td><strong>${item.mese}</strong></td><td>${dataInput}</td><td>€${importoInput}</td><td>${salvaBtn}</td></tr>`;
                });
                
                html += '</tbody></table></div></div>';
                contenutoRiepilogo.innerHTML = html;
                
            } else if (periodicita === 'bimestrale') {
                const importoBimestrale = (importoAnnuo / 6).toFixed(2);
                titoloRiepilogo.textContent = 'Riepilogo Proforma Bimestrali';
                
                // Date bimestrali: ogni 2 mesi (6 rate all'anno)
                const isLeapYear = annoCorrente % 4 === 0 && (annoCorrente % 100 !== 0 || annoCorrente % 400 === 0);
                const dateBimestrali = [
                    { mese: 'Gen-Feb', data: `${isLeapYear ? '29' : '28'}/02/${annoCorrente}` },
                    { mese: 'Mar-Apr', data: `30/04/${annoCorrente}` },
                    { mese: 'Mag-Giu', data: `30/06/${annoCorrente}` },
                    { mese: 'Lug-Ago', data: `31/08/${annoCorrente}` },
                    { mese: 'Set-Ott', data: `31/10/${annoCorrente}` },
                    { mese: 'Nov-Dic', data: `31/12/${annoCorrente}` }
                ];
                
                let html = '<div class="col-12"><div class="table-responsive"><table class="table table-sm table-striped">';
                html += '<thead class="table-warning"><tr><th>Periodo</th><th>Data Scadenza</th><th>Importo</th><th>Azioni</th></tr></thead><tbody>';
                
                dateBimestrali.forEach((item, index) => {
                    const dataInput = `<input type="date" class="form-control form-control-sm date-input" data-periodo="${index + 1}" value="${convertToInputDate(item.data)}" style="width: 140px;">`;
                    const importoInput = `<input type="number" class="form-control form-control-sm importo-input" data-periodo="${index + 1}" value="${importoBimestrale}" step="0.01" min="0" style="width: 100px;">`;
                    const salvaBtn = `<button class="btn btn-sm btn-outline-primary save-proforma-btn" data-periodo="${index + 1}" onclick="salvaProformaSingola(${index + 1}, 'bimestrale')" title="Salva questa rata nel database"><i class="fas fa-save"></i> Salva</button>`;
                    
                    html += `<tr><td><strong>${item.mese}</strong></td><td>${dataInput}</td><td>€${importoInput}</td><td>${salvaBtn}</td></tr>`;
                });
                
                html += '</tbody></table></div></div>';
                contenutoRiepilogo.innerHTML = html;
                
            } else if (periodicita === 'semestrale') {
                const importoSemestrale = (importoAnnuo / 2).toFixed(2);
                titoloRiepilogo.textContent = 'Riepilogo Proforma Semestrali';
                
                // Date semestrali: 2 rate semestrali
                const dateSemestrali = [
                    { mese: '1° Semestre', data: `30/06/${annoCorrente}` },
                    { mese: '2° Semestre', data: `31/12/${annoCorrente}` }
                ];
                
                let html = '<div class="col-12"><div class="table-responsive"><table class="table table-sm table-striped">';
                html += '<thead class="table-warning"><tr><th>Periodo</th><th>Data Scadenza</th><th>Importo</th><th>Azioni</th></tr></thead><tbody>';
                
                dateSemestrali.forEach((item, index) => {
                    const dataInput = `<input type="date" class="form-control form-control-sm date-input" data-periodo="${index + 1}" value="${convertToInputDate(item.data)}" style="width: 140px;">`;
                    const importoInput = `<input type="number" class="form-control form-control-sm importo-input" data-periodo="${index + 1}" value="${importoSemestrale}" step="0.01" min="0" style="width: 100px;">`;
                    const salvaBtn = `<button class="btn btn-sm btn-outline-primary save-proforma-btn" data-periodo="${index + 1}" onclick="salvaProformaSingola(${index + 1}, 'semestrale')" title="Salva questa rata nel database"><i class="fas fa-save"></i> Salva</button>`;
                    
                    html += `<tr><td><strong>${item.mese}</strong></td><td>${dataInput}</td><td>€${importoInput}</td><td>${salvaBtn}</td></tr>`;
                });
                
                html += '</tbody></table></div></div>';
                contenutoRiepilogo.innerHTML = html;
                
            } else if (periodicita === 'mensile') {
                const importoMensile = (importoAnnuo / 12).toFixed(2);
                titoloRiepilogo.textContent = 'Riepilogo Proforma Mensili';
                
                const dateMensili = getDateMensili(annoCorrente);
                let html = '<div class="col-12"><div class="table-responsive"><table class="table table-sm table-striped">';
                html += '<thead class="table-warning"><tr><th>Mese</th><th>Data Scadenza</th><th>Importo</th><th>Azioni</th></tr></thead><tbody>';
                
                dateMensili.forEach((item, index) => {
                    const dataInput = `<input type="date" class="form-control form-control-sm date-input" data-periodo="${index + 1}" value="${convertToInputDate(item.data)}" style="width: 140px;">`;
                    const importoInput = `<input type="number" class="form-control form-control-sm importo-input" data-periodo="${index + 1}" value="${importoMensile}" step="0.01" min="0" style="width: 100px;">`;
                    const salvaBtn = `<button class="btn btn-sm btn-outline-primary save-proforma-btn" data-periodo="${index + 1}" onclick="salvaProformaSingola(${index + 1}, 'mensile')" title="Salva questa rata nel database"><i class="fas fa-save"></i> Salva</button>`;
                    
                    html += `<tr><td><strong>${item.mese}</strong></td><td>${dataInput}</td><td>€${importoInput}</td><td>${salvaBtn}</td></tr>`;
                });
                
                html += '</tbody></table></div></div>';
                contenutoRiepilogo.innerHTML = html;
            }
        }
        
        // Funzione per convertire data italiana in formato input date (YYYY-MM-DD)
        function convertToInputDate(italianDate) {
            // Converte da "30/06/2025" a "2025-06-30"
            const parts = italianDate.split('/');
            if (parts.length === 3) {
                return `${parts[2]}-${parts[1].padStart(2, '0')}-${parts[0].padStart(2, '0')}`;
            }
            return '';
        }
        
        // Funzione per convertire data input in formato italiano
        function convertToItalianDate(inputDate) {
            // Converte da "2025-06-30" a "30/06/2025"
            const parts = inputDate.split('-');
            if (parts.length === 3) {
                return `${parts[2]}/${parts[1]}/${parts[0]}`;
            }
            return '';
        }

        
        // Funzione per verificare se i dati mandato sono cambiati
        function checkMandatoChanges() {
            if (!proformaTipoSelect || !importoMandatoInput || !dataMandatoInput) return false;
            
            return (
                initialMandatoValues.proformaTipo !== proformaTipoSelect.value ||
                initialMandatoValues.importoMandatoAnnuo !== importoMandatoInput.value ||
                initialMandatoValues.dataMandato !== dataMandatoInput.value
            );
        }
        
        // Funzione per rigenerare le proforma con conferma
        async function regenerateProformaWithConfirmation() {
            const clienteId = @Model.IdCliente;
            
            // Verifica se ci sono proforma esistenti
            try {
                const response = await fetch(`/Clienti/HasProformeEsistenti?idCliente=${clienteId}`);
                const data = await response.json();
                
                if (data.hasProforma) {
                    const confirmed = confirm(
                        '⚠️ ATTENZIONE!\n\n' +
                        'Modificando i dati del mandato, tutte le proforma esistenti verranno CANCELLATE e RIGENERATE con i nuovi dati.\n\n' +
                        'Questa operazione è IRREVERSIBILE!\n\n' +
                        'Sei sicuro di voler procedere?'
                    );
                    
                    if (!confirmed) {
                        // Ripristina i valori originali
                        proformaTipoSelect.value = initialMandatoValues.proformaTipo;
                        importoMandatoInput.value = initialMandatoValues.importoMandatoAnnuo;
                        dataMandatoInput.value = initialMandatoValues.dataMandato;
                        updateRiepilogo();
                        return false;
                    }
                    
                    // Procedi con la rigenerazione
                    const regenerateResponse = await fetch('/Clienti/RigeneraProforma', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `idCliente=${clienteId}&dataMandato=${encodeURIComponent(dataMandatoInput.value)}&importoMandatoAnnuo=${encodeURIComponent(importoMandatoInput.value)}&proformaTipo=${encodeURIComponent(proformaTipoSelect.value)}`
                    });
                    
                    const regenerateData = await regenerateResponse.json();
                    if (regenerateData.success) {
                        // Aggiorna i valori di riferimento
                        initialMandatoValues = {
                            proformaTipo: proformaTipoSelect.value,
                            importoMandatoAnnuo: importoMandatoInput.value,
                            dataMandato: dataMandatoInput.value
                        };
                        
                        // Mostra messaggio di successo
                        alert('✅ ' + regenerateData.message);
                    } else {
                        alert('❌ ' + regenerateData.message);
                    }
                }
            } catch (error) {
                console.error('Errore durante la verifica/rigenerazione delle proforma:', error);
            }
            
            return true;
        }
        
        // Event listeners per i cambiamenti dei dati mandato
        if (proformaTipoSelect) {
            proformaTipoSelect.addEventListener('change', async function() {
                console.log('Periodicità cambiata:', this.value);
                console.log('Valore iniziale:', initialMandatoValues.proformaTipo);
                
                // Se è un cliente esistente, cambia la periodicità nel database
                const clienteId = @Model.IdCliente;
                if (clienteId > 0 && this.value !== initialMandatoValues.proformaTipo) {
                    try {
                        console.log('Cambio periodicità nel database...');
                        const response = await fetch('/Clienti/CambiaPeriodicita', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            body: new URLSearchParams({
                                idCliente: clienteId,
                                nuovaPeriodicita: this.value
                            })
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            console.log('Periodicità cambiata con successo:', result.message);
                            // Aggiorna i valori iniziali
                            initialMandatoValues.proformaTipo = this.value;
                            userHasModifiedValues = false;
                            // Carica le nuove proforma
                            await caricaProformeEsistenti();
                        } else {
                            console.error('Errore nel cambio periodicità:', result.message);
                            alert('Errore nel cambio di periodicità: ' + result.message);
                        }
                    } catch (error) {
                        console.error('Errore nella richiesta di cambio periodicità:', error);
                        alert('Errore nella comunicazione con il server');
                    }
                } else {
                    // Cliente nuovo o stessa periodicità, usa calcolo automatico
                    updateRiepilogo();
                }
                
                // Se è in modifica e i dati sono cambiati, richiedi conferma (solo per altri campi)
                if (checkMandatoChanges() && this.value === initialMandatoValues.proformaTipo) {
                    console.log('Dati mandato cambiati, richiedo conferma...');
                    regenerateProformaWithConfirmation();
                }
            });
        }
        
        if (importoMandatoInput) {
            importoMandatoInput.addEventListener('input', updateRiepilogo);
            importoMandatoInput.addEventListener('blur', function() {
                if (checkMandatoChanges()) {
                    regenerateProformaWithConfirmation();
                }
            });
        }
        
        if (dataMandatoInput) {
            dataMandatoInput.addEventListener('blur', function() {
                if (checkMandatoChanges()) {
                    regenerateProformaWithConfirmation();
                }
            });
        }
        
        // Funzione per catturare i valori iniziali dopo il caricamento
        function captureInitialValues() {
            initialMandatoValues = {
                proformaTipo: proformaTipoSelect ? proformaTipoSelect.value : '',
                importoMandatoAnnuo: importoMandatoInput ? importoMandatoInput.value : '',
                dataMandato: dataMandatoInput ? dataMandatoInput.value : ''
            };
            console.log('Valori iniziali catturati:', initialMandatoValues);
        }
        
        // Cattura i valori iniziali dopo un breve delay per assicurarsi che il DOM sia pronto
        setTimeout(captureInitialValues, 100);
        
        // Funzione per caricare e popolare proforma esistenti
        async function caricaProformeEsistenti() {
            if (!importoMandatoInput || !proformaTipoSelect || !importoMandatoInput.value || !proformaTipoSelect.value) {
                return; // Non ci sono dati mandato, usa il calcolo automatico
            }
            
            try {
                const clienteId = @Model.IdCliente;
                const response = await fetch(`/Clienti/GetProformeCliente?idCliente=${clienteId}`);
                const data = await response.json();
                
                if (data.success && data.proforma && data.proforma.length > 0) {
                    console.log('Proforma esistenti trovate:', data.proforma);
                    
                    // Aggiorna il riepilogo con i dati reali
                    const tipoProforma = proformaTipoSelect.value;
                    await updateRiepilogoConProformeEsistenti(data.proforma, tipoProforma);
                } else {
                    // Nessuna proforma esistente, usa il calcolo automatico
                    updateRiepilogo();
                }
            } catch (error) {
                console.error('Errore nel caricamento proforma esistenti:', error);
                // In caso di errore, fallback al calcolo automatico
                updateRiepilogo();
            }
        }
        
        // Funzione per aggiornare il riepilogo con proforma esistenti
        async function updateRiepilogoConProformeEsistenti(proformeEsistenti, tipoProforma) {
            if (!proformeEsistenti || proformeEsistenti.length === 0) {
                updateRiepilogo();
                return;
            }
            
            riepilogoContainer.style.display = 'block';
            
            // Mostra le istruzioni per la modifica
            const istruzioniEl = document.getElementById('istruzioniProforma');
            if (istruzioniEl) {
                istruzioniEl.style.display = 'block';
            }
            
            // Ordina le proforma per numero rata
            const proformeOrdinate = proformeEsistenti.sort((a, b) => a.numeroRata - b.numeroRata);
            
            let html = '<div class="col-12"><div class="table-responsive"><table class="table table-sm table-striped">';
            
            if (tipoProforma === 'trimestrale') {
                titoloRiepilogo.textContent = 'Riepilogo Proforma Trimestrali';
                html += '<thead class="table-warning"><tr><th>Trimestre</th><th>Data Scadenza</th><th>Importo</th><th>Azioni</th></tr></thead><tbody>';
                
                const nomiTrimestri = ['1° Trimestre', '2° Trimestre', '3° Trimestre', '4° Trimestre'];
                proformeOrdinate.forEach((proforma, index) => {
                    const nomeperiodo = nomiTrimestri[index] || `${proforma.numeroRata}° Trimestre`;
                    const dataFormatted = formatDateForInput(proforma.dataScadenza);
                    const dataInput = `<input type="date" class="form-control form-control-sm date-input" data-periodo="${proforma.numeroRata}" value="${dataFormatted}" style="width: 140px;">`;
                    const importoInput = `<input type="number" class="form-control form-control-sm importo-input" data-periodo="${proforma.numeroRata}" value="${proforma.importoRata}" step="0.01" min="0" style="width: 100px;">`;
                    const salvaBtn = `<button class="btn btn-sm btn-outline-primary save-proforma-btn" data-periodo="${proforma.numeroRata}" onclick="salvaProformaSingola(${proforma.numeroRata}, 'trimestrale')" title="Salva questa rata nel database"><i class="fas fa-save"></i> Salva</button>`;
                    
                    html += `<tr><td><strong>${nomeperiodo}</strong></td><td>${dataInput}</td><td>€${importoInput}</td><td>${salvaBtn}</td></tr>`;
                });
                
            } else if (tipoProforma === 'bimestrale') {
                titoloRiepilogo.textContent = 'Riepilogo Proforma Bimestrali';
                html += '<thead class="table-warning"><tr><th>Periodo</th><th>Data Scadenza</th><th>Importo</th><th>Azioni</th></tr></thead><tbody>';
                
                const nomiBimestrali = ['Gen-Feb', 'Mar-Apr', 'Mag-Giu', 'Lug-Ago', 'Set-Ott', 'Nov-Dic'];
                proformeOrdinate.forEach((proforma, index) => {
                    const nomeperiodo = nomiBimestrali[index] || `Bimestre ${proforma.numeroRata}`;
                    const dataFormatted = formatDateForInput(proforma.dataScadenza);
                    const dataInput = `<input type="date" class="form-control form-control-sm date-input" data-periodo="${proforma.numeroRata}" value="${dataFormatted}" style="width: 140px;">`;
                    const importoInput = `<input type="number" class="form-control form-control-sm importo-input" data-periodo="${proforma.numeroRata}" value="${proforma.importoRata}" step="0.01" min="0" style="width: 100px;">`;
                    const salvaBtn = `<button class="btn btn-sm btn-outline-primary save-proforma-btn" data-periodo="${proforma.numeroRata}" onclick="salvaProformaSingola(${proforma.numeroRata}, 'bimestrale')" title="Salva questa rata nel database"><i class="fas fa-save"></i> Salva</button>`;
                    
                    html += `<tr><td><strong>${nomeperiodo}</strong></td><td>${dataInput}</td><td>€${importoInput}</td><td>${salvaBtn}</td></tr>`;
                });
                
            } else if (tipoProforma === 'semestrale') {
                titoloRiepilogo.textContent = 'Riepilogo Proforma Semestrali';
                html += '<thead class="table-warning"><tr><th>Periodo</th><th>Data Scadenza</th><th>Importo</th><th>Azioni</th></tr></thead><tbody>';
                
                const nomiSemestri = ['1° Semestre', '2° Semestre'];
                proformeOrdinate.forEach((proforma, index) => {
                    const nomeperiodo = nomiSemestri[index] || `${proforma.numeroRata}° Semestre`;
                    const dataFormatted = formatDateForInput(proforma.dataScadenza);
                    const dataInput = `<input type="date" class="form-control form-control-sm date-input" data-periodo="${proforma.numeroRata}" value="${dataFormatted}" style="width: 140px;">`;
                    const importoInput = `<input type="number" class="form-control form-control-sm importo-input" data-periodo="${proforma.numeroRata}" value="${proforma.importoRata}" step="0.01" min="0" style="width: 100px;">`;
                    const salvaBtn = `<button class="btn btn-sm btn-outline-primary save-proforma-btn" data-periodo="${proforma.numeroRata}" onclick="salvaProformaSingola(${proforma.numeroRata}, 'semestrale')" title="Salva questa rata nel database"><i class="fas fa-save"></i> Salva</button>`;
                    
                    html += `<tr><td><strong>${nomeperiodo}</strong></td><td>${dataInput}</td><td>€${importoInput}</td><td>${salvaBtn}</td></tr>`;
                });
                
            } else if (tipoProforma === 'mensile') {
                titoloRiepilogo.textContent = 'Riepilogo Proforma Mensili';
                html += '<thead class="table-warning"><tr><th>Mese</th><th>Data Scadenza</th><th>Importo</th><th>Azioni</th></tr></thead><tbody>';
                
                const nomiMesi = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 
                                 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];
                proformeOrdinate.forEach((proforma, index) => {
                    const nomeMese = nomiMesi[index] || `Mese ${proforma.numeroRata}`;
                    const dataFormatted = formatDateForInput(proforma.dataScadenza);
                    const dataInput = `<input type="date" class="form-control form-control-sm date-input" data-periodo="${proforma.numeroRata}" value="${dataFormatted}" style="width: 140px;">`;
                    const importoInput = `<input type="number" class="form-control form-control-sm importo-input" data-periodo="${proforma.numeroRata}" value="${proforma.importoRata}" step="0.01" min="0" style="width: 100px;">`;
                    const salvaBtn = `<button class="btn btn-sm btn-outline-primary save-proforma-btn" data-periodo="${proforma.numeroRata}" onclick="salvaProformaSingola(${proforma.numeroRata}, 'mensile')" title="Salva questa rata nel database"><i class="fas fa-save"></i> Salva</button>`;
                    
                    html += `<tr><td><strong>${nomeMese}</strong></td><td>${dataInput}</td><td>€${importoInput}</td><td>${salvaBtn}</td></tr>`;
                });
            }
            
            html += '</tbody></table></div></div>';
            contenutoRiepilogo.innerHTML = html;
        }
        
        // Funzione per formattare data da backend per input HTML
        function formatDateForInput(dateString) {
            // Il backend restituisce "yyyy-mm-dd", che è già il formato corretto per input date
            return dateString;
        }
        
        // Flag per tracciare se l'utente ha modificato valori manualmente
        let userHasModifiedValues = false;
        
        // Aggiungi event listeners per rilevare modifiche manuali
        document.addEventListener('change', function(event) {
            if (event.target.classList.contains('date-input') || event.target.classList.contains('importo-input')) {
                userHasModifiedValues = true;
                console.log('🔄 Rilevata modifica manuale dall\'utente');
            }
        });
        
        // Inizializza - prima carica proforma esistenti, poi fallback a calcolo automatico
        setTimeout(async () => {
            if (!userHasModifiedValues) {
                await caricaProformeEsistenti();
            }
        }, 200);
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
